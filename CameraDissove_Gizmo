set cut_paste_input [stack 0]
version 15.0 v4
push 0
push $cut_paste_input
Group {
 inputs 2
 name Camera_Dissover1
 tile_color 0x4f7a62ff
 label v002
 note_font "Verdana Bold"
 selected true
 xpos 829
 ypos 86
 addUserKnob {20 User}
 addUserKnob {22 dissove_cameras l "Dissove Cameras" T "\n\n#v008\n#(update to python 3.0)\n\n#v001\n# base on the CamDissolve v007 and make it as nuke 12 version\n# need to able to create duplicated camera inside of the group\n# need to copy or link all the animation and knob from outside inside.\n# need to add the expression into the duplicated camera \n# able to create new caemra \n# able to Export project cam\n# able to export blend cam\n\n\n\n\n\ndef getInputNodes(): # return the all input nods from this Node\n    \n    # \n    group_node = nuke.thisNode()  \n    \n    if group_node:\n        # Get the input nodes connected to the Group node\n        input_nodes = group_node.dependencies()\n    \n        # Loop through the input nodes and print( their names\n        for node in input_nodes:\n            print( node.name())\n    else:\n        print( 'error')\n             \n    return input_nodes\n\n\ndef CameraDissolve():\n\n    import nukescripts\n    group_node = nuke.thisNode()\n\n    # get the dependencies node name \n    sNodes = getInputNodes()\n    \n    \n\n    ## check error\n\n    # if select No nodes\n    if len(sNodes)!=2:\n        nuke.message('Please select only two Camera')\n        return()\n            \n\n\n    # Get Camera\n    aCamNode = sNodes\[0]\n    bCamNode = sNodes\[-1]\n\n    # Get Camera Name \n    aCamName = aCamNode.name()\n    bCamName = bCamNode.name()\n\n\n    print( (aCamNode.name()))\n    print( (bCamNode.name()))\n\n    # DisSelected Node\n    for node in sNodes:\n        node\['selected'].setValue(0)\n\n    # Create new Camera\n    \n    # with group_node: # inside group node \n    with nuke.root():# create node on the root \n    \n        #create Dissolve camera\n        nCamera = nuke.createNode('Camera2')\n        \n        nukescripts.remove_inputs() # this remove the input for selectedNode\n        \n        nCamera\['xpos'].setValue(((aCamNode\['xpos'].getValue()+bCamNode\['xpos'].getValue())/2)+0)\n        nCamera\['ypos'].setValue(((aCamNode\['ypos'].getValue()+bCamNode\['ypos'].getValue())/2)+300)\n        \n        nCamera\['tile_color'].setValue(0xff00bfff)\n        nCamera\['gl_color'].setValue(0xff00bfff)\n        nCamera\['label'].setValue('CameraDissolve')\n\n        # Deselected All nodes\n        for n in nuke.allNodes():\n            n.knob(\"selected\").setValue(False) \n\n\n\n    # Create Retimed A Cam\n    \n    refACam = nuke.createNode('Camera2')\n    \n    refACam\['xpos'].setValue(aCamNode\['xpos'].getValue()+0)\n    refACam\['ypos'].setValue(aCamNode\['ypos'].getValue()+150)\n    \n    \n    refACam\['tile_color'].setValue(int(aCamNode\['tile_color'].getValue()))\n    refACam\['gl_color'].setValue(int(aCamNode\['tile_color'].getValue()))\n    refACam\['label'].setValue('Retimed A Cam') \n\n    # Deselected All nodes\n    for n in nuke.allNodes():\n        n.knob(\"selected\").setValue(False) \n\n    \n    # Create Retimed B Cam\n    refBCam = nuke.createNode('Camera2')\n    \n    refBCam\['xpos'].setValue(bCamNode\['xpos'].getValue()+0)\n    refBCam\['ypos'].setValue(bCamNode\['ypos'].getValue()+150)\n    \n    \n    refBCam\['tile_color'].setValue(int(bCamNode\['tile_color'].getValue()))\n    refBCam\['gl_color'].setValue(int(bCamNode\['tile_color'].getValue()))\n    refBCam\['label'].setValue('Retimed B Cam')    \n\n    # Deselected All nodes\n    for n in nuke.allNodes():\n        n.knob(\"selected\").setValue(False) \n\n    \n\n    # Create custom CamDissove tag and knobs \n\n    camMixSliderTab = nuke.Tab_Knob('cameraDissolveTab', 'CamDissolve')\n    aCamTimeOffsetknob = nuke.Int_Knob('aCameraOffset', 'A Cam Time Offset',0)\n    bCamTimeOffsetknob = nuke.Int_Knob('bCameraOffset', 'B Cam Time Offset',0)   \n    camMixSliderKnob = nuke.Double_Knob('camDissolve','Camera Dissolve')\n    #aCamRetimed = nuke.PyScript_Knob('aCamRetimed','Create Retimed A Cam',aCamRetimePyContent)\n    #bCamRetimed = nuke.PyScript_Knob('bCamRetimed','Create Retimed B Cam',bCamRetimePyContent)   \n\n\n    # Collect all the knob as List for Dissolve node\n\n    panelKnobs = \[camMixSliderTab,aCamTimeOffsetknob,bCamTimeOffsetknob,camMixSliderKnob]\n\n\n    #Create Retimed A Cam knobs\n    camMixSliderTab_ACam = nuke.Tab_Knob('cameraDissolveTab', 'CamDissolve')\n    aCamTimeOffsetknob_ACam = nuke.Int_Knob('aCameraOffset', 'A Cam Time Offset',0)\n    bCamTimeOffsetknob_ACam = nuke.Int_Knob('bCameraOffset', 'B Cam Time Offset',0)  \n    camMixSliderKnob_ACam = nuke.Double_Knob('camDissolve','Camera Dissolve')\n\n    # Collect a Cam knobs\n    panelKnobs_ACam = \[camMixSliderTab_ACam,aCamTimeOffsetknob_ACam,bCamTimeOffsetknob_ACam,camMixSliderKnob_ACam]\n\n    #Create Retimed B Cam knobs\n    camMixSliderTab_BCam = nuke.Tab_Knob('cameraDissolveTab', 'CamDissolve')\n    aCamTimeOffsetknob_BCam = nuke.Int_Knob('aCameraOffset', 'A Cam Time Offset',0)\n    bCamTimeOffsetknob_BCam = nuke.Int_Knob('bCameraOffset', 'B Cam Time Offset',0)  \n    camMixSliderKnob_BCam = nuke.Double_Knob('camDissolve','Camera Dissolve')\n\n    # Collect a Cam knobs\n    panelKnobs_BCam = \[camMixSliderTab_BCam,aCamTimeOffsetknob_BCam,bCamTimeOffsetknob_BCam,camMixSliderKnob_BCam]\n\n\n    # Add all the knobs to Panel \n    with nuke.root(): # getout to root\n        for panelKnob in panelKnobs:\n            nCamera.addKnob(panelKnob) \n    \n    with group_node:# get in to the group node \n        \n        for panelKnobRefACam in panelKnobs_ACam:\n            refACam.addKnob(panelKnobRefACam) \n        \n\n        for panelKnobRefBCam in panelKnobs_BCam:\n            refBCam.addKnob(panelKnobRefBCam) \n        \n\n   \n\n    # Get All The Knob Would Like to Blend\n\n    \n    knobsList =\[\n    'translate','rotate','scaling','uniform_scale','skew',\n    'focal','haperture','vaperture',\n    'near','far','win_translate','win_scale','winroll','focal_point','fstop'\n    ]\n\n    # Camera3 only 'pivot_translate','pivot_rotate',\n\n\n    for knob in knobsList:\n        \n        nCamera\[knob].setExpression('lerp(\{\}.\{\}\{\},\{\}.\{\}\{\},\{\})'.format(aCamName,knob,'(frame-aCameraOffset)',bCamName,knob,'(frame-bCameraOffset)','camDissolve'))\n        refACam\[knob].setExpression('lerp(\{\}.\{\}\{\},\{\}.\{\}\{\},\{\})'.format(aCamName,knob,'(frame-aCameraOffset)',bCamName,knob,'(frame-bCameraOffset)','camDissolve'))\n        refBCam\[knob].setExpression('lerp(\{\}.\{\}\{\},\{\}.\{\}\{\},\{\})'.format(aCamName,knob,'(frame-aCameraOffset)',bCamName,knob,'(frame-bCameraOffset)','camDissolve'))\n    \n    # expression linked To Dissolved Camera\n    \n\n    ## Retimed A cam Setup Value\n    # Link time offset to Dissolve Camera node\n    refACam\['aCameraOffset'].setExpression('parent.%s.aCameraOffset'%nCamera.name())\n    refACam\['bCameraOffset'].setExpression('parent.%s.bCameraOffset'%nCamera.name())\n    refACam\['camDissolve'].setValue(0) # set value to 0 so, value match A cam \n\n\n    refACam\['aCameraOffset'].setEnabled(False)    # disable all parameter\n    refACam\['bCameraOffset'].setEnabled(False)\n    refACam\['camDissolve'].setEnabled(False)\n\n    ## Retimed B cam Setup Value\n    refBCam\['aCameraOffset'].setExpression('parent.%s.aCameraOffset'%nCamera.name())\n    refBCam\['bCameraOffset'].setExpression('parent.%s.bCameraOffset'%nCamera.name())\n    refBCam\['camDissolve'].setValue(1)# set value to 1 so, value match B cam \n\n    refBCam\['aCameraOffset'].setEnabled(False)\n    refBCam\['bCameraOffset'].setEnabled(False)\n    refBCam\['camDissolve'].setEnabled(False)\n\n\n\n\n\n#copy and paste the projectedCmaera inside the group for cleaness \n\n    \nCameraDissolve()\n\n\n\n" +STARTLINE}
}
 Output {
  inputs 0
  name Output1
  xpos 340
  ypos 169
 }
 NoOp {
  inputs 0
  name NoOp1
  xpos 228
  ypos 31
 }
 Input {
  inputs 0
  name Camera1
  xpos 331
  ypos -72
 }
 Input {
  inputs 0
  name Camera2
  xpos 488
  ypos -70
  number 1
 }
end_group
