set cut_paste_input [stack 0]
version 13.2 v1
push $cut_paste_input
NoOp {
 name CameraDissolver
 selected true
 xpos 260
 ypos -56
 addUserKnob {20 User}
 addUserKnob {22 createDissolveNodeBotton l Create T "\n\n\n\ndef CameraDissolve():\n\n    # select nodes\n    sNodes = nuke.selectedNodes()\n    \n    # get the information from the selected Nodes\n\n\n\n    ## check error\n\n    # if select No nodes\n    if len(sNodes)!=2:\n        nuke.message('Please select only two Camera')\n        return()\n            \n\n\n    # Get Camera\n    aCamNode = sNodes\[-1]\n    bCamNode = sNodes\[0]\n\n    # Get Camera Name \n    aCamName = aCamNode.name()\n    bCamName = bCamNode.name()\n\n\n    print (aCamNode.name())\n    print (bCamNode.name())\n\n    # DisSelected Node\n    for node in sNodes:\n        node\['selected'].setValue(0)\n\n    # Create new Camera\n    nCamera = nuke.createNode('Camera3')\n    \n    nCamera\['xpos'].setValue(((aCamNode\['xpos'].getValue()+bCamNode\['xpos'].getValue())/2)+0)\n    nCamera\['ypos'].setValue(((aCamNode\['ypos'].getValue()+bCamNode\['ypos'].getValue())/2)+300)\n    \n    nCamera\['tile_color'].setValue(0xff00bfff)\n    nCamera\['gl_color'].setValue(0xff00bfff)\n    nCamera\['label'].setValue('CameraDissolve')\n\n    # Deselected All nodes\n    for n in nuke.allNodes():\n        n.knob(\"selected\").setValue(False) \n\n    \n    # Create Retimed A Cam\n\n    refACam = nuke.createNode('Camera3')\n    \n    refACam\['xpos'].setValue(aCamNode\['xpos'].getValue()+0)\n    refACam\['ypos'].setValue(aCamNode\['ypos'].getValue()+150)\n    \n    \n    refACam\['tile_color'].setValue(int(aCamNode\['tile_color'].getValue()))\n    refACam\['gl_color'].setValue(int(aCamNode\['tile_color'].getValue()))\n    refACam\['label'].setValue('Retimed A Cam') \n\n    # Deselected All nodes\n    for n in nuke.allNodes():\n        n.knob(\"selected\").setValue(False) \n\n    \n    # Create Retimed B Cam\n    refBCam = nuke.createNode('Camera3')\n    \n    refBCam\['xpos'].setValue(bCamNode\['xpos'].getValue()+0)\n    refBCam\['ypos'].setValue(bCamNode\['ypos'].getValue()+150)\n    \n    \n    refBCam\['tile_color'].setValue(int(bCamNode\['tile_color'].getValue()))\n    refBCam\['gl_color'].setValue(int(bCamNode\['tile_color'].getValue()))\n    refBCam\['label'].setValue('Retimed B Cam')    \n\n    # Deselected All nodes\n    for n in nuke.allNodes():\n        n.knob(\"selected\").setValue(False) \n\n    \n\n    # Create custom CamDissove tag and knobs \n\n    camMixSliderTab = nuke.Tab_Knob('cameraDissolveTab', 'CamDissolve')\n    aCamTimeOffsetknob = nuke.Int_Knob('aCameraOffset', 'A Cam Time Offset',0)\n    bCamTimeOffsetknob = nuke.Int_Knob('bCameraOffset', 'B Cam Time Offset',0)   \n    camMixSliderKnob = nuke.Double_Knob('camDissolve','Camera Dissolve')\n    #aCamRetimed = nuke.PyScript_Knob('aCamRetimed','Create Retimed A Cam',aCamRetimePyContent)\n    #bCamRetimed = nuke.PyScript_Knob('bCamRetimed','Create Retimed B Cam',bCamRetimePyContent)   \n\n\n    # Collect all the knob as List for Dissolve node\n\n    panelKnobs = \[camMixSliderTab,aCamTimeOffsetknob,bCamTimeOffsetknob,camMixSliderKnob]\n\n\n    #Create Retimed A Cam knobs\n    camMixSliderTab_ACam = nuke.Tab_Knob('cameraDissolveTab', 'CamDissolve')\n    aCamTimeOffsetknob_ACam = nuke.Int_Knob('aCameraOffset', 'A Cam Time Offset',0)\n    bCamTimeOffsetknob_ACam = nuke.Int_Knob('bCameraOffset', 'B Cam Time Offset',0)  \n    camMixSliderKnob_ACam = nuke.Double_Knob('camDissolve','Camera Dissolve')\n\n    # Collect a Cam knobs\n    panelKnobs_ACam = \[camMixSliderTab_ACam,aCamTimeOffsetknob_ACam,bCamTimeOffsetknob_ACam,camMixSliderKnob_ACam]\n\n    #Create Retimed B Cam knobs\n    camMixSliderTab_BCam = nuke.Tab_Knob('cameraDissolveTab', 'CamDissolve')\n    aCamTimeOffsetknob_BCam = nuke.Int_Knob('aCameraOffset', 'A Cam Time Offset',0)\n    bCamTimeOffsetknob_BCam = nuke.Int_Knob('bCameraOffset', 'B Cam Time Offset',0)  \n    camMixSliderKnob_BCam = nuke.Double_Knob('camDissolve','Camera Dissolve')\n\n    # Collect a Cam knobs\n    panelKnobs_BCam = \[camMixSliderTab_BCam,aCamTimeOffsetknob_BCam,bCamTimeOffsetknob_BCam,camMixSliderKnob_BCam]\n\n\n    # Add all the knobs to Panel \n    \n    for panelKnob in panelKnobs:\n        nCamera.addKnob(panelKnob) \n\n    for panelKnobRefACam in panelKnobs_ACam:\n        refACam.addKnob(panelKnobRefACam) \n    \n\n    for panelKnobRefBCam in panelKnobs_BCam:\n        refBCam.addKnob(panelKnobRefBCam) \n    \n\n   \n\n    # Get All The Knob Would Like to Blend\n\n    knobsList =\[\n    'translate','rotate','scaling','uniform_scale','skew',\n    'pivot_translate','pivot_rotate','focal','haperture','vaperture',\n    'near','far','win_translate','win_scale','winroll','focal_point','fstop'\n    ]\n\n\n\n\n    for knob in knobsList:\n        \n        nCamera\[knob].setExpression('lerp(\{\}.\{\}\{\},\{\}.\{\}\{\},\{\})'.format(aCamName,knob,'(frame-aCameraOffset)',bCamName,knob,'(frame-bCameraOffset)','camDissolve'))\n        refACam\[knob].setExpression('lerp(\{\}.\{\}\{\},\{\}.\{\}\{\},\{\})'.format(aCamName,knob,'(frame-aCameraOffset)',bCamName,knob,'(frame-bCameraOffset)','camDissolve'))\n        refBCam\[knob].setExpression('lerp(\{\}.\{\}\{\},\{\}.\{\}\{\},\{\})'.format(aCamName,knob,'(frame-aCameraOffset)',bCamName,knob,'(frame-bCameraOffset)','camDissolve'))\n    \n    # expression linked To Dissolved Camera\n    \n\n    ## Retimed A cam Setup Value\n    # Link time offset to Dissolve Camera node\n    refACam\['aCameraOffset'].setExpression('parent.%s.aCameraOffset'%nCamera.name())\n    refACam\['bCameraOffset'].setExpression('parent.%s.bCameraOffset'%nCamera.name())\n    refACam\['camDissolve'].setValue(0) # set value to 0 so, value match A cam \n\n\n    refACam\['aCameraOffset'].setEnabled(False)    # disable all parameter\n    refACam\['bCameraOffset'].setEnabled(False)\n    refACam\['camDissolve'].setEnabled(False)\n\n    ## Retimed B cam Setup Value\n    refBCam\['aCameraOffset'].setExpression('parent.%s.aCameraOffset'%nCamera.name())\n    refBCam\['bCameraOffset'].setExpression('parent.%s.bCameraOffset'%nCamera.name())\n    refBCam\['camDissolve'].setValue(1)# set value to 1 so, value match B cam \n\n    refBCam\['aCameraOffset'].setEnabled(False)\n    refBCam\['bCameraOffset'].setEnabled(False)\n    refBCam\['camDissolve'].setEnabled(False)\n\nCameraDissolve()\n\n\n\n\n" +STARTLINE}
}
